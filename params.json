{"name":"Verilogin'","tagline":"This site is mainly used as a log of my learning process of verilog.","body":"# Verilogin'\r\nCompendium of all my notes taken while learning Verilog.\r\n\r\n## Basics\r\n\r\n### Sized numbers\r\nThe size of the numbers are specified.\r\n\r\n    <bit_size> '<base> <number>\r\n    8'b11111111\r\n    8'o377\r\n    8'd255\r\n    8'hff\r\n\r\n### Unsized numbers\r\nBy default these are 32 bit at least, depends on the implementation.\r\n\r\n    123\r\n    'o123\r\n    'h123\r\n\r\n### Special \"numbers\"\r\nVerilog has two weird \"numbers\" that are very useful to represent unknown things, they are `x` and `z`.\r\nThe character `x` in a number represents an unknown value. They are useful in a number of situations but where I think they excel is at comparisons like inside the `case` statements.\r\n\r\n    8'b1111xxxx \r\n\r\nThere is also the `_` number. This is used to indicate that certain parts of a number are not used.\r\n\r\n    8'b1111__xx\r\n\r\n### Registers & wires\r\nWires are like inmutable registers, they have a value but they don't \"hold\" it.\r\nRegisters maintain status and are, as far as I know, the equivalent of flip-flips.\r\n\r\n    reg some_reg;\r\n\r\nSince we did not assign a value for the single bit register `some_reg` the value it holds is `1'bx`.\r\n\r\n### Vectors\r\nBoth wires and registers can be made to be vectors by specifying a vector size. It should be noted that vectors are not array and specifying the size range creates a register or a wire of a certain bit length `n`.\r\n\r\n    reg [7:0] some_reg;\r\n\r\nNow `some_reg` will be a register vector of size 8.\r\n\r\n### Integers\r\nThe type of registers is `unsigned` so they are not that convenient for some operations that are inherently signed. In order to overcome this fact we can use an `integer` that is a signed 32 bit integer (in most of the cases).\r\n\r\n    integer some_integer;\r\n\r\n### Arrays\r\nArrays are also available in Verilog and are used as follows:\r\n\r\n    integer int_array[0:7]; // Array of 8 integer values.\r\n    reg reg_array[0:15];    // Array of 16 register values.\r\n\r\n### Memories\r\nThe way to define a memory range in Verilog seems to be using an array of registers of a given size.\r\n\r\n    reg [7:0]  byte_aligned_memory[0:1023];  // BYTE addressable memory of 1 kilo byte.\r\n    reg [31:0] dword_aligned_memory[0:1023]; // DWORD addressable memory of 4 kilo byte.\r\n\r\n### Parameters\r\nParameters are like constants in C/C++. They can be used as constants inside your designs.\r\n\r\n    parameter MEM_SIZE 1024;\r\n    reg [7:0] byte_mem[0:MEM_SIZE-1];\r\n\r\n## Useful things\r\n\r\n### $display\r\nDisplay is very similar to `printf` and is used for the exact same reason, to print things to the terminal. This is obviously non synthesizable but it will be useful while using the simulator.\r\n\r\n    $display(\"Hello %d\", 1234); // Prints 'Hello 1234'.\r\n\r\n### $monitor\r\nSimilar to display but you only need to call it once and it will make the simulator display whatever you need whenever the thing being monitored changes. It shares the same syntax with `$display` so it is very easy to use. Again this is not synthesizable and can only be used while simulating your designs.\r\n\r\n    $monitor(\"Clock value clk=%d variable x1 value=%h\", clk, x1); // Will print the message each clock tick.\r\n\r\nThere can only be one active monitor routine so if you need a different one after enabling one you need to use `$monitoroff` and `$monitoron` to stop / start the last monitor.\r\n\r\n### $stop\r\nThis stops the simulation and leaves the simulation in a halted state where you can inspect the stopped state.\r\n\r\n    $stop;\r\n\r\n### $finish\r\nSame as stop but it aborts the simulation and terminates it, not allowing you to introspect into your design.\r\n\r\n    $finish;\r\n\r\n### Macros\r\nEquivalent to C/C++ macros.\r\n\r\n    `define REG8 reg [7:0]\r\n\r\nThe preprocessor will replace each instance of `REG8` with reg [7:0].\r\n\r\n### Including other designs.\r\nIn order to use other verilog designs you can use the include directive.\r\n\r\n    `include design_b.v\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}